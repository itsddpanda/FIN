"""Init

Revision ID: d16d7cbed65e
Revises: 
Create Date: 2025-03-11 20:12:07.680871

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd16d7cbed65e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('amc',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('isin', sa.String(), nullable=True),
    sa.Column('amfi_code', sa.String(), nullable=True),
    sa.CheckConstraint('isin IS NOT NULL OR amfi_code IS NOT NULL', name='ck_amc_atleast_one_code'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('amfi_code'),
    sa.UniqueConstraint('isin'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=True)
    op.create_table('statement_period',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_date', sa.Date(), nullable=False),
    sa.Column('to_date', sa.Date(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'from_date', 'to_date', name='uq_statement_period_user')
    )
    op.create_table('folio',
    sa.Column('folio_number', sa.String(), nullable=False),
    sa.Column('statement_period_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('pan', sa.String(), nullable=True),
    sa.Column('amc_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['amc_id'], ['amc.id'], ),
    sa.ForeignKeyConstraint(['statement_period_id'], ['statement_period.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('folio_number'),
    sa.UniqueConstraint('folio_number', name='uq_folio_statement_period')
    )
    op.create_index(op.f('ix_folio_folio_number'), 'folio', ['folio_number'], unique=False)
    op.create_table('scheme',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('folio_id', sa.String(), nullable=True),
    sa.Column('scheme_name', sa.String(), nullable=True),
    sa.Column('advisor', sa.String(), nullable=True),
    sa.Column('rta_code', sa.String(), nullable=True),
    sa.Column('rta', sa.String(), nullable=True),
    sa.Column('scheme_type', sa.String(), nullable=True),
    sa.Column('isin', sa.String(), nullable=True),
    sa.Column('amfi_code', sa.String(), nullable=True),
    sa.Column('nominees', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('open_units', sa.Float(), nullable=True),
    sa.Column('close_units', sa.Float(), nullable=True),
    sa.Column('close_calculated_units', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['folio_id'], ['folio.folio_number'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('folio_id', 'scheme_name', name='uq_scheme_folio')
    )
    op.create_index(op.f('ix_scheme_id'), 'scheme', ['id'], unique=False)
    op.create_table('transaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scheme_id', sa.Integer(), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=True),
    sa.Column('units', sa.Float(), nullable=True),
    sa.Column('nav', sa.Float(), nullable=True),
    sa.Column('balance', sa.Float(), nullable=True),
    sa.Column('transaction_type', sa.String(), nullable=True),
    sa.Column('dividend_rate', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['scheme_id'], ['scheme.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('valuation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scheme_id', sa.Integer(), nullable=True),
    sa.Column('valuation_date', sa.Date(), nullable=True),
    sa.Column('valuation_nav', sa.Float(), nullable=True),
    sa.Column('valuation_cost', sa.Float(), nullable=True),
    sa.Column('valuation_value', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['scheme_id'], ['scheme.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('scheme_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('valuation')
    op.drop_table('transaction')
    op.drop_index(op.f('ix_scheme_id'), table_name='scheme')
    op.drop_table('scheme')
    op.drop_index(op.f('ix_folio_folio_number'), table_name='folio')
    op.drop_table('folio')
    op.drop_table('statement_period')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('amc')
    # ### end Alembic commands ###
